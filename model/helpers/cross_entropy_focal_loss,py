import torch
import torch.nn.functional as F

class CrossEntropyFocalLoss(torch.nn.Module):
    def __init__(self, alpha=0.75, gamma=1.0):
        super(CrossEntropyFocalLoss, self).__init__()
        self.alpha = alpha
        self.gamma = gamma
        self.class_weights = torch.tensor([2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]).to(device)

    def forward(self, inputs, labels):
        probs = F.softmax(inputs, dim=1)

        targets_one_hot = F.one_hot(labels, num_classes=inputs.shape[1]).float()
        
        p_t = torch.sum(probs * targets_one_hot, dim=1)
        self.alpha = torch.sum(self.class_weights * targets_one_hot, dim=1)

        ce_loss = F.cross_entropy(inputs, labels, reduction='none')
        focal_weight = (1 - p_t) ** self.gamma
        focal_loss = self.alpha * focal_weight * ce_loss

        return focal_loss.mean()